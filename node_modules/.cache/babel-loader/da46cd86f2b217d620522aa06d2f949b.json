{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/ahsan/Documents/Ahsan/projects/react-photo-gallery-with-photo-filter/src/components/Global/PhotoContainer/CanvasImgCard.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport PotoSettings from './PhotoSettings';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemCard } from '../../../itemTypes';\nimport { useDispatch } from 'react-redux';\nimport { removePhotoFromCanvas } from '../../../redux/actions/addNewPhotoToCanvasActions';\nimport './CanvasImgCard.scss';\n\nconst CanvasImgCard = ({\n  id,\n  imgSrc,\n  filterSettings,\n  imgIndex,\n  index,\n  moveCard\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [modalOpen, setModalOpen] = useState(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    onToggleForbidDrag();\n  }, [modalOpen]);\n  const [, drop] = useDrop({\n    accept: ItemCard.CARD,\n\n    hover(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index;\n\n      if (dragIndex === hoverIndex) {\n        return;\n      }\n\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect();\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n      const clientOffset = monitor.getClientOffset();\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      }\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      }\n\n      moveCard(dragIndex, hoverIndex);\n      item.index = hoverIndex;\n    }\n\n  });\n  const [forbidDrag, setForbidDrag] = useState(false);\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    item: {\n      type: ItemCard.CARD,\n      id,\n      index\n    },\n    canDrag: !forbidDrag,\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n\n      if (item && dropResult) {\n        localStorage.setItem(\"monitor\", JSON.stringify(monitor));\n      }\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  drag(drop(ref));\n\n  const deletePhoto = id => {\n    if (window.confirm(\"Do you realy want to delete this photo?\")) {\n      dispatch(removePhotoFromCanvas(id));\n    }\n  };\n\n  const openPhotoSettings = () => {\n    setModalOpen(!modalOpen);\n  };\n\n  const setModalStatus = payload => {\n    setModalOpen(payload);\n  };\n\n  const onToggleForbidDrag = useCallback(() => {\n    !modalOpen ? setForbidDrag(false) : setForbidDrag(true);\n  }, [modalOpen]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvasImgCard\" + (modalOpen ? ' modalOpen' : ''),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        ref: ref,\n        className: 'canvasImgCard__draggableImg' + (isDragging ? ' isActive' : ''),\n        id: imgIndex,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          style: {\n            filter: `brightness(${filterSettings.brightness}) contrast(${filterSettings.contrast}%) invert(${filterSettings.invert}%) grayscale(${filterSettings.grayscale}%)`\n          },\n          src: imgSrc,\n          alt: \"...\",\n          width: \"278\",\n          height: \"400\",\n          \"data-id\": imgIndex\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"canvasImgCard__btnContainer\" + (modalOpen ? ' isActive' : ''),\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"canvasImgCard__btnSettings\",\n          onClick: openPhotoSettings,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/img/settings.svg\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"canvasImgCard__btnSettings\" + (modalOpen ? ' disabled' : ''),\n          onClick: () => deletePhoto(id),\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"/img/delete.svg\",\n            alt: \"\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), modalOpen && /*#__PURE__*/_jsxDEV(PotoSettings, {\n        imgSrc: imgSrc,\n        isModalOpen: modalOpen,\n        getModalStatus: setModalStatus,\n        imgIndex: imgIndex\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CanvasImgCard, \"T7Q9aanZoDFq7mKK/elhz84qDlA=\", false, function () {\n  return [useDispatch, useDrop, useDrag];\n});\n\n_c = CanvasImgCard;\nexport default CanvasImgCard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CanvasImgCard\");","map":{"version":3,"sources":["/Users/ahsan/Documents/Ahsan/projects/react-photo-gallery-with-photo-filter/src/components/Global/PhotoContainer/CanvasImgCard.js"],"names":["React","useRef","useState","useEffect","useCallback","PotoSettings","useDrag","useDrop","ItemCard","useDispatch","removePhotoFromCanvas","CanvasImgCard","id","imgSrc","filterSettings","imgIndex","index","moveCard","dispatch","modalOpen","setModalOpen","ref","onToggleForbidDrag","drop","accept","CARD","hover","item","monitor","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","forbidDrag","setForbidDrag","isDragging","drag","type","canDrag","end","dropResult","getDropResult","localStorage","setItem","JSON","stringify","collect","deletePhoto","window","confirm","openPhotoSettings","setModalStatus","payload","filter","brightness","contrast","invert","grayscale"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,WAA7C,QAAgE,OAAhE;AACA,OAAOC,YAAP,MAAyB,iBAAzB;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,WAAjC;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,qBAAT,QAAsC,mDAAtC;AACA,OAAO,sBAAP;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,MAAN;AAAcC,EAAAA,cAAd;AAA8BC,EAAAA,QAA9B;AAAwCC,EAAAA,KAAxC;AAA+CC,EAAAA;AAA/C,CAAD,KAA+D;AAAA;;AACjF,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAMmB,GAAG,GAAGpB,MAAM,CAAC,IAAD,CAAlB;AAEAE,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,kBAAkB;AACrB,GAFQ,EAEN,CAACH,SAAD,CAFM,CAAT;AAIA,QAAM,GAAGI,IAAH,IAAWhB,OAAO,CAAC;AACrBiB,IAAAA,MAAM,EAAEhB,QAAQ,CAACiB,IADI;;AAErBC,IAAAA,KAAK,CAACC,IAAD,EAAOC,OAAP,EAAgB;AAAA;;AACjB,UAAI,CAACP,GAAG,CAACQ,OAAT,EAAkB;AACd;AACH;;AACD,YAAMC,SAAS,GAAGH,IAAI,CAACX,KAAvB;AACA,YAAMe,UAAU,GAAGf,KAAnB;;AACA,UAAIc,SAAS,KAAKC,UAAlB,EAA8B;AAC1B;AACH;;AACD,YAAMC,iBAAiB,mBAAGX,GAAG,CAACQ,OAAP,iDAAG,aAAaI,qBAAb,EAA1B;AACA,YAAMC,YAAY,GAAG,CAACF,iBAAiB,CAACG,MAAlB,GAA2BH,iBAAiB,CAACI,GAA9C,IAAqD,CAA1E;AACA,YAAMC,YAAY,GAAGT,OAAO,CAACU,eAAR,EAArB;AACA,YAAMC,YAAY,GAAGF,YAAY,CAACG,CAAb,GAAiBR,iBAAiB,CAACI,GAAxD;;AACA,UAAIN,SAAS,GAAGC,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACvD;AACH;;AACD,UAAIJ,SAAS,GAAGC,UAAZ,IAA0BQ,YAAY,GAAGL,YAA7C,EAA2D;AACvD;AACH;;AACDjB,MAAAA,QAAQ,CAACa,SAAD,EAAYC,UAAZ,CAAR;AACAJ,MAAAA,IAAI,CAACX,KAAL,GAAae,UAAb;AACH;;AAvBoB,GAAD,CAAxB;AAyBA,QAAM,CAACU,UAAD,EAAaC,aAAb,IAA8BxC,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAAC;AAAEyC,IAAAA;AAAF,GAAD,EAAiBC,IAAjB,IAAyBtC,OAAO,CAAC;AACnCqB,IAAAA,IAAI,EAAE;AAAEkB,MAAAA,IAAI,EAAErC,QAAQ,CAACiB,IAAjB;AAAuBb,MAAAA,EAAvB;AAA2BI,MAAAA;AAA3B,KAD6B;AAEnC8B,IAAAA,OAAO,EAAE,CAACL,UAFyB;AAGnCM,IAAAA,GAAG,EAAE,CAACpB,IAAD,EAAOC,OAAP,KAAmB;AACpB,YAAMoB,UAAU,GAAGpB,OAAO,CAACqB,aAAR,EAAnB;;AACA,UAAItB,IAAI,IAAIqB,UAAZ,EAAwB;AACpBE,QAAAA,YAAY,CAACC,OAAb,CAAqB,SAArB,EAAgCC,IAAI,CAACC,SAAL,CAAezB,OAAf,CAAhC;AACH;AACJ,KARkC;AASnC0B,IAAAA,OAAO,EAAG1B,OAAD,KAAc;AACnBe,MAAAA,UAAU,EAAEf,OAAO,CAACe,UAAR;AADO,KAAd;AAT0B,GAAD,CAAtC;AAcAC,EAAAA,IAAI,CAACrB,IAAI,CAACF,GAAD,CAAL,CAAJ;;AAEA,QAAMkC,WAAW,GAAI3C,EAAD,IAAQ;AACxB,QAAI4C,MAAM,CAACC,OAAP,CAAe,yCAAf,CAAJ,EAA+D;AAC3DvC,MAAAA,QAAQ,CAACR,qBAAqB,CAACE,EAAD,CAAtB,CAAR;AACH;AACJ,GAJD;;AAKA,QAAM8C,iBAAiB,GAAG,MAAM;AAC5BtC,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH,GAFD;;AAGA,QAAMwC,cAAc,GAAIC,OAAD,IAAa;AAChCxC,IAAAA,YAAY,CAACwC,OAAD,CAAZ;AACH,GAFD;;AAGA,QAAMtC,kBAAkB,GAAGlB,WAAW,CAAC,MAAM;AACzC,KAACe,SAAD,GAAauB,aAAa,CAAC,KAAD,CAA1B,GAAoCA,aAAa,CAAC,IAAD,CAAjD;AACH,GAFqC,EAEnC,CAACvB,SAAD,CAFmC,CAAtC;AAIA,sBACI;AAAK,IAAA,SAAS,EAAE,mBAAmBA,SAAS,GAAG,YAAH,GAAkB,EAA9C,CAAhB;AAAA,2BACI;AAAA,8BACI;AAAK,QAAA,GAAG,EAAEE,GAAV;AAAe,QAAA,SAAS,EAAE,iCAAiCsB,UAAU,GAAG,WAAH,GAAiB,EAA5D,CAA1B;AAA2F,QAAA,EAAE,EAAE5B,QAA/F;AAAA,+BACI;AAAK,UAAA,KAAK,EAAE;AAAE8C,YAAAA,MAAM,EAAG,cAAa/C,cAAc,CAACgD,UAAW,cAAahD,cAAc,CAACiD,QAAS,aAAYjD,cAAc,CAACkD,MAAO,gBAAelD,cAAc,CAACmD,SAAU;AAAjK,WAAZ;AAAoL,UAAA,GAAG,EAAEpD,MAAzL;AAAiM,UAAA,GAAG,EAAC,KAArM;AAA2M,UAAA,KAAK,EAAC,KAAjN;AAAuN,UAAA,MAAM,EAAC,KAA9N;AAAoO,qBAASE;AAA7O;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI;AAAK,QAAA,SAAS,EAAE,iCAAiCI,SAAS,GAAG,WAAH,GAAiB,EAA3D,CAAhB;AAAA,gCACI;AAAQ,UAAA,SAAS,EAAC,4BAAlB;AAA+C,UAAA,OAAO,EAAEuC,iBAAxD;AAAA,iCACI;AAAK,YAAA,GAAG,EAAC,mBAAT;AAA6B,YAAA,GAAG,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAQ,UAAA,SAAS,EAAE,gCAAgCvC,SAAS,GAAG,WAAH,GAAiB,EAA1D,CAAnB;AAAkF,UAAA,OAAO,EAAE,MAAMoC,WAAW,CAAC3C,EAAD,CAA5G;AAAA,iCACI;AAAK,YAAA,GAAG,EAAC,iBAAT;AAA2B,YAAA,GAAG,EAAC;AAA/B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,EAcQO,SAAS,iBAAI,QAAC,YAAD;AAAc,QAAA,MAAM,EAAEN,MAAtB;AAA8B,QAAA,WAAW,EAAEM,SAA3C;AAAsD,QAAA,cAAc,EAAEwC,cAAtE;AAAsF,QAAA,QAAQ,EAAE5C;AAAhG;AAAA;AAAA;AAAA;AAAA,cAdrB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CAvFD;;GAAMJ,a;UACeF,W,EAQAF,O,EA0BcD,O;;;KAnC7BK,a;AAyFN,eAAeA,aAAf","sourcesContent":["import React, { useRef, useState, useEffect, useCallback } from 'react';\nimport PotoSettings from './PhotoSettings'\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemCard } from '../../../itemTypes';\nimport { useDispatch } from 'react-redux'\nimport { removePhotoFromCanvas } from '../../../redux/actions/addNewPhotoToCanvasActions'\nimport './CanvasImgCard.scss'\n\nconst CanvasImgCard = ({ id, imgSrc, filterSettings, imgIndex, index, moveCard }) => {\n    const dispatch = useDispatch()\n    const [modalOpen, setModalOpen] = useState(false)\n    const ref = useRef(null);\n\n    useEffect(() => {\n        onToggleForbidDrag()\n    }, [modalOpen])\n\n    const [, drop] = useDrop({\n        accept: ItemCard.CARD,\n        hover(item, monitor) {\n            if (!ref.current) {\n                return;\n            }\n            const dragIndex = item.index;\n            const hoverIndex = index;\n            if (dragIndex === hoverIndex) {\n                return;\n            }\n            const hoverBoundingRect = ref.current?.getBoundingClientRect();\n            const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;\n            const clientOffset = monitor.getClientOffset();\n            const hoverClientY = clientOffset.y - hoverBoundingRect.top;\n            if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n                return;\n            }\n            if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n                return;\n            }\n            moveCard(dragIndex, hoverIndex);\n            item.index = hoverIndex;\n        },\n    });\n    const [forbidDrag, setForbidDrag] = useState(false);\n    const [{ isDragging }, drag] = useDrag({\n        item: { type: ItemCard.CARD, id, index },\n        canDrag: !forbidDrag,\n        end: (item, monitor) => {\n            const dropResult = monitor.getDropResult();\n            if (item && dropResult) {\n                localStorage.setItem(\"monitor\", JSON.stringify(monitor))\n            }\n        },\n        collect: (monitor) => ({\n            isDragging: monitor.isDragging(),\n        }),\n    });\n\n    drag(drop(ref));\n\n    const deletePhoto = (id) => {\n        if (window.confirm(\"Do you realy want to delete this photo?\")) {\n            dispatch(removePhotoFromCanvas(id))\n        }\n    }\n    const openPhotoSettings = () => {\n        setModalOpen(!modalOpen)\n    }\n    const setModalStatus = (payload) => {\n        setModalOpen(payload)\n    }\n    const onToggleForbidDrag = useCallback(() => {\n        !modalOpen ? setForbidDrag(false) : setForbidDrag(true)\n    }, [modalOpen]);\n\n    return (\n        <div className={\"canvasImgCard\" + (modalOpen ? ' modalOpen' : '')}>\n            <div>\n                <div ref={ref} className={'canvasImgCard__draggableImg' + (isDragging ? ' isActive' : '')} id={imgIndex}>\n                    <img style={{ filter: `brightness(${filterSettings.brightness}) contrast(${filterSettings.contrast}%) invert(${filterSettings.invert}%) grayscale(${filterSettings.grayscale}%)` }} src={imgSrc} alt=\"...\" width=\"278\" height=\"400\" data-id={imgIndex} />\n                </div>\n\n                <div className={\"canvasImgCard__btnContainer\" + (modalOpen ? ' isActive' : '')}>\n                    <button className=\"canvasImgCard__btnSettings\" onClick={openPhotoSettings}>\n                        <img src=\"/img/settings.svg\" alt=\"\" />\n                    </button>\n                    <button className={\"canvasImgCard__btnSettings\" + (modalOpen ? ' disabled' : '')} onClick={() => deletePhoto(id)}>\n                        <img src=\"/img/delete.svg\" alt=\"\" />\n                    </button>\n                </div>\n                {\n                    modalOpen && <PotoSettings imgSrc={imgSrc} isModalOpen={modalOpen} getModalStatus={setModalStatus} imgIndex={imgIndex} />\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default CanvasImgCard\n"]},"metadata":{},"sourceType":"module"}