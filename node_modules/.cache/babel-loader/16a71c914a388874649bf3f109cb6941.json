{"ast":null,"code":"import * as actions from '../actions/actionTypes';\n\nconst canvasPhotoReducer = (state = [], action) => {\n  switch (action.type) {\n    case actions.ADD_NEW_PHOTO_TO_CANVAS:\n      return [...state, {\n        id: new Date().getTime(),\n        imgSrc: action.payload.imgSrc,\n        imgIndex: action.payload.imgIndex,\n        filterSettings: {\n          invert: '0',\n          contrast: '100',\n          brightness: '1',\n          grayscale: '1'\n        }\n      }];\n\n    case actions.CHANGE_FILTER:\n      return state.map((item, index) => action.payload.imgIndex === index ? action.payload.filterType === 'invert' ? { ...item,\n        filterSettings: { ...item.filterSettings,\n          invert: action.payload.payload\n        }\n      } : action.payload.filterType === 'contrast' ? { ...item,\n        filterSettings: { ...item.filterSettings,\n          contrast: action.payload.payload\n        }\n      } : action.payload.filterType === 'brightness' ? { ...item,\n        filterSettings: { ...item.filterSettings,\n          brightness: action.payload.payload\n        }\n      } : action.payload.filterType === 'grayscale' ? { ...item,\n        filterSettings: { ...item.filterSettings,\n          grayscale: action.payload.payload\n        }\n      } : item : item);\n\n    case actions.REMOVE_PHOTO_FROM_CANVAS:\n      return state.filter(photo => photo.id !== action.payload.id);\n\n    case actions.REPLACE_IMG_SRC:\n      return state.map(item => item.imgSrc === action.payload.targetImgUrl ? { ...item,\n        imgSrc: action.payload.srcImgUrl\n      } : item);\n\n    default:\n      return state;\n  }\n};\n\nexport default canvasPhotoReducer;","map":{"version":3,"sources":["/Users/ahsan/Documents/Ahsan/projects/react-photo-gallery-with-photo-filter/src/redux/reducers/addNewPhotoToCanvasReducer.js"],"names":["actions","canvasPhotoReducer","state","action","type","ADD_NEW_PHOTO_TO_CANVAS","id","Date","getTime","imgSrc","payload","imgIndex","filterSettings","invert","contrast","brightness","grayscale","CHANGE_FILTER","map","item","index","filterType","REMOVE_PHOTO_FROM_CANVAS","filter","photo","REPLACE_IMG_SRC","targetImgUrl","srcImgUrl"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,wBAAzB;;AACA,MAAMC,kBAAkB,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKJ,OAAO,CAACK,uBAAb;AACI,aAAO,CACH,GAAGH,KADA,EAEH;AACII,QAAAA,EAAE,EAAE,IAAIC,IAAJ,GAAWC,OAAX,EADR;AAEIC,QAAAA,MAAM,EAAEN,MAAM,CAACO,OAAP,CAAeD,MAF3B;AAGIE,QAAAA,QAAQ,EAAER,MAAM,CAACO,OAAP,CAAeC,QAH7B;AAIIC,QAAAA,cAAc,EAAE;AACZC,UAAAA,MAAM,EAAE,GADI;AAEZC,UAAAA,QAAQ,EAAE,KAFE;AAGZC,UAAAA,UAAU,EAAE,GAHA;AAIZC,UAAAA,SAAS,EAAE;AAJC;AAJpB,OAFG,CAAP;;AAcJ,SAAKhB,OAAO,CAACiB,aAAb;AACI,aAAOf,KAAK,CAACgB,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,KACbjB,MAAM,CAACO,OAAP,CAAeC,QAAf,KAA4BS,KAA5B,GACIjB,MAAM,CAACO,OAAP,CAAeW,UAAf,KAA8B,QAA9B,GAAyC,EACrC,GAAGF,IADkC;AAErCP,QAAAA,cAAc,EAAE,EACZ,GAAGO,IAAI,CAACP,cADI;AAEZC,UAAAA,MAAM,EAAEV,MAAM,CAACO,OAAP,CAAeA;AAFX;AAFqB,OAAzC,GAMIP,MAAM,CAACO,OAAP,CAAeW,UAAf,KAA8B,UAA9B,GAA2C,EAC3C,GAAGF,IADwC;AAE3CP,QAAAA,cAAc,EAAE,EACZ,GAAGO,IAAI,CAACP,cADI;AAEZE,UAAAA,QAAQ,EAAEX,MAAM,CAACO,OAAP,CAAeA;AAFb;AAF2B,OAA3C,GAMAP,MAAM,CAACO,OAAP,CAAeW,UAAf,KAA8B,YAA9B,GAA6C,EAC7C,GAAGF,IAD0C;AAE7CP,QAAAA,cAAc,EAAE,EACZ,GAAGO,IAAI,CAACP,cADI;AAEZG,UAAAA,UAAU,EAAEZ,MAAM,CAACO,OAAP,CAAeA;AAFf;AAF6B,OAA7C,GAMAP,MAAM,CAACO,OAAP,CAAeW,UAAf,KAA8B,WAA9B,GAA4C,EAC5C,GAAGF,IADyC;AAE5CP,QAAAA,cAAc,EAAE,EACZ,GAAGO,IAAI,CAACP,cADI;AAEZI,UAAAA,SAAS,EAAEb,MAAM,CAACO,OAAP,CAAeA;AAFd;AAF4B,OAA5C,GAMAS,IAzBR,GA0BIA,IA3BD,CAAP;;AA8BJ,SAAKnB,OAAO,CAACsB,wBAAb;AACI,aAAOpB,KAAK,CAACqB,MAAN,CAAaC,KAAK,IAAIA,KAAK,CAAClB,EAAN,KAAaH,MAAM,CAACO,OAAP,CAAeJ,EAAlD,CAAP;;AAEJ,SAAKN,OAAO,CAACyB,eAAb;AACI,aAAOvB,KAAK,CAACgB,GAAN,CAAUC,IAAI,IACjBA,IAAI,CAACV,MAAL,KAAgBN,MAAM,CAACO,OAAP,CAAegB,YAA/B,GAA8C,EAC1C,GAAGP,IADuC;AAE1CV,QAAAA,MAAM,EAAEN,MAAM,CAACO,OAAP,CAAeiB;AAFmB,OAA9C,GAGIR,IAJD,CAAP;;AAOJ;AACI,aAAOjB,KAAP;AA3DR;AA6DH,CA9DD;;AAgEA,eAAeD,kBAAf","sourcesContent":["import * as actions from '../actions/actionTypes'\nconst canvasPhotoReducer = (state = [], action) => {\n    switch (action.type) {\n        case actions.ADD_NEW_PHOTO_TO_CANVAS:\n            return [\n                ...state,\n                {\n                    id: new Date().getTime(),\n                    imgSrc: action.payload.imgSrc,\n                    imgIndex: action.payload.imgIndex,\n                    filterSettings: {\n                        invert: '0',\n                        contrast: '100',\n                        brightness: '1',\n                        grayscale: '1'\n                    }\n                },\n            ]\n        case actions.CHANGE_FILTER:\n            return state.map((item, index) => (\n                action.payload.imgIndex === index ? (\n                    action.payload.filterType === 'invert' ? {\n                        ...item,\n                        filterSettings: {\n                            ...item.filterSettings,\n                            invert: action.payload.payload\n                        }\n                    } : action.payload.filterType === 'contrast' ? {\n                        ...item,\n                        filterSettings: {\n                            ...item.filterSettings,\n                            contrast: action.payload.payload\n                        }\n                    } : action.payload.filterType === 'brightness' ? {\n                        ...item,\n                        filterSettings: {\n                            ...item.filterSettings,\n                            brightness: action.payload.payload\n                        }\n                    } : action.payload.filterType === 'grayscale' ? {\n                        ...item,\n                        filterSettings: {\n                            ...item.filterSettings,\n                            grayscale: action.payload.payload\n                        }\n                    } : item\n                ) : item\n            ))\n\n        case actions.REMOVE_PHOTO_FROM_CANVAS:\n            return state.filter(photo => photo.id !== action.payload.id)\n\n        case actions.REPLACE_IMG_SRC:\n            return state.map(item => (\n                item.imgSrc === action.payload.targetImgUrl ? {\n                    ...item,\n                    imgSrc: action.payload.srcImgUrl\n                } : item\n            ))\n\n        default:\n            return state\n    }\n}\n\nexport default canvasPhotoReducer\n\n"]},"metadata":{},"sourceType":"module"}